name: Release AppImage

on:
  workflow_dispatch:

jobs:
  check-updates-job:
    runs-on: ubuntu-latest

    outputs:
      updated: ${{ steps.check-updates.outputs.updated }}
      appimagetag: ${{ steps.check-updates.outputs.appimagetag }}

    steps:
      - name: Set up param
        id: param
        run: awk -F/ '{print"owner="$1"\nrepo="$2}' <<< "${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Get latest tags
        id: latest-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ steps.param.outputs.owner }}
          repo: ${{ steps.param.outputs.repo }}
          query: |
            query($owner:String!,$repo:String!) {
              appimage: repository(owner:$owner, name:$repo) {
                refs(refPrefix:"refs/tags/", last:1) {
                  edges {
                    node {
                      name
                    }
                  }
                }
              }
              vim: repository(owner:"vim", name:"vim") {
                refs(refPrefix:"refs/tags/", last:1) {
                  edges {
                    node {
                      name
                    }
                  }
                }
              }
            }
          jq_extract: >+
            "vim_tag=" + .data.vim.refs.edges[0].node.name,
            "appimage_tag=" + .data.appimage.refs.edges[0].node.name
        run: |
          gh api graphql -F owner="$owner" -F repo="$repo" -f query="$query" --jq "$jq_extract" | \
            tee -a "$GITHUB_ENV"

      - name: Check updates
        id: check-updates
        run: |
          printf >> "$GITHUB_OUTPUT" '%s\n' \
           "appimagetag=${appimage_tag}" \
           "updated=$([[ ${appimage_tag} != ${vim_tag} ]] && echo true)"

  create-appimage-job:
    runs-on: ubuntu-22.04

    needs: check-updates-job

    if: needs.check-updates-job.outputs.updated == 'true'

    env:
      VIM_REF: ${{ needs.check-updates-job.outputs.appimagetag }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Set up fuse
        run: |                                    
          sudo apt-get update                     
          sudo docker buildx create --buildkitd-flags '--allow-insecure-entitlement security.insecure' --name insecure-builder
          sudo docker buildx use insecure-builder

          sudo apt-get install -y libfuse2

      - name: Build and run Docker container
        run: |
          cat <<EOF > Dockerfile
          # syntax=docker/dockerfile:1-labs
          FROM ubuntu:18.04

          ENV DEBIAN_FRONTEND=noninteractive
          ENV DISPLAY=:99
          ENV TERM=xterm
          ENV CC=gcc
          ENV DEPLOY_GTK_VERSION=3

          # Install dependencies
          RUN apt-get update && apt-get install -y \
              autoconf \
              automake \
              lcov \
              libfuse2 \
              gettext \
              libcanberra-dev \
              libperl-dev \
              python-dev \
              python3-dev \
              liblua5.3-dev \
              lua5.3 \
              ruby-dev \
              tcl-dev \
              cscope \
              libgtk-3-dev \
              libgtk-3-0 \
              libgtk-3-bin \
              libgtk-3-common \
              desktop-file-utils \
              libtool-bin \
              at-spi2-core \
              libsodium-dev \
              gcc-8 \
              g++-8 \
              make \
              git \
              xvfb \
              wget \
              sudo \
              sysvinit-utils \
              && rm -rf /var/lib/apt/lists/*

          # Set up GCC-10 as default
          RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \
              && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100

          # Thanks to: https://askubuntu.com/questions/1404499/how-to-install-lua5-3-in-ubuntu-18-04
          # Also see: https://github.com/vim/vim/issues/973#issuecomment-238489739
          RUN update-alternatives --install /usr/bin/lua lua-interpreter /usr/bin/lua5.3 130 \
            && update-alternatives --install /usr/bin/luac lua-compiler /usr/bin/luac5.3 130

          WORKDIR /workspace
          COPY . .

          # Set up environment
          RUN sysctl -w net.ipv6.conf.lo.disable_ipv6=0
          RUN mkdir -p /etc/service/xvfb
          RUN echo '#!/bin/sh\n\nexec Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset' > /etc/service/xvfb/run
          RUN chmod +x /etc/service/xvfb/run

          # Build Vim
          RUN bash scripts/build_vim.sh

          # Test Vim, skip for now
          # RUN (cd vim/src/gvim && make test) || bash scripts/dump_failed_screentests.sh

          # Create AppImages
          RUN --security=insecure bash -e scripts/appimage.sh Vim
          RUN --security=insecure bash -e scripts/appimage.sh GVim
          EOF

          # Thanks to: https://github.com/moby/moby/issues/1916#issuecomment-1456960765
          sudo docker buildx build --allow security.insecure -t vim-appimage-builder .
          sudo docker run --privileged --rm -v $(pwd):/output vim-appimage-builder sh -c "cp *.AppImage *.zsync /output/"

      - name: Verify AppImages
        run: |
          ls -lh *.AppImage
          ./Vim*.AppImage --version
          ./GVim*.AppImage --version

      - name: Commit and push
        id: commit
        run: |
          tag_name=$(git -C vim describe --tags --abbrev=0)
          echo "tag_name=${tag_name}" >> "$GITHUB_OUTPUT"
          vim_summary=$(git submodule summary vim)
          workflow_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}

          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}"
          git commit -m "Vim: ${tag_name}" -m "${vim_summary}" -m "${workflow_url}" vim
          git tag -f "${tag_name}" -m "Vim: ${tag_name}"
          git push --follow-tags -u origin "${GITHUB_REF_NAME}"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.commit.outputs.tag_name }}
        run: |
          gh release create "$tag_name" \
            *.AppImage *.zsync \
            -F release.body -t "Vim: $tag_name"
